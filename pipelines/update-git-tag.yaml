trigger: none

pool:
  name: SelfHosted

variables:
  user.email: "samsthomas@hotmail.co.uk"
  user.name: "samsthomas"
  group: Secrets



steps:
  - checkout: self 
    persistCredentials: true

  - script: |
      git config user.email ${{variables['user.email']}}
      git config user.name ${{variables['user.name']}}
    displayName: 'configure git creds'

  - task: PowerShell@2
    displayName: "Create Latest tag for releases"
    inputs:
      pwsh: true
      azurePowerShellVersion: latestVersion
      targetType: 'filePath'
      filePath: $(Build.SourcesDirectory)/Auto-tagging/powershell-scripts/set-release-tag.ps1
      workingDirectory: $(Build.SourcesDirectory)

  - task: PowerShell@2
    condition: contains(variables['Build.SourceBranch'], '-release-branch')
    displayName: Update Tag Folder
    inputs:
      targetType: 'inline'
      script: |

        
        #pull repo
        $repoName = "https://github.com/samsthomas/Python-GitHub-Security"
        $clonePath = "$env:BUILD_SOURCESDIRECTORY/Python-GitHub-Security"

        Write-Host "Cloning Repo"

        git clone --branch main $repoName $clonePath

        cd $clonePath

        Write-Host "Current directory: $(Get-Location)"

        pwd
        
        # git config user.email ${{variables['user.email']}}
        # git config user.name ${{variables['user.name']}}


        $yamlFilePath = "$(Get-Location)/Image-tags/key-pair.yaml"
        Write-Host "Updated YAML file path: $yamlFilePath"

        if (!(Test-Path $yamlFilePath)) {
            Write-Host "ERROR: YAML file not found at $yamlFilePath"
            exit 1
        }

        Write-Host " "
        Write-Host "Get all branches:"
        git branch -l
        Write-Host " "

        git fetch origin main
        
        #switch to a new branch 
        $branchName = "update-yaml-$(Build.BuildNumber)"
        git checkout -b $branchName origin/main

        # Write-Host "Current directory: $(Get-Location)"



        Import-Module powershell-yaml
        
        Write-Host " "
        Write-Host " "
        Write-Host " "

        #get current yaml content
        Write-Host "Get current Yaml content ..."
        Write-Host " "

        $content = Get-Content -Path "$yamlFilePath" -Raw
        Write-Host "Current YAML content:"
        Write-Host $content
      
        $versionsYaml = ConvertFrom-Yaml $content

        Write-Host " "
        Write-Host " "
        
        #Ensure we maintain the variables structure
        if (-not $versionsYaml.variables) {
            $versionsYaml.variables = @{}
        }

        #update yaml content 
        Write-Host "Updating YAML file..."
        $versionsYaml.variables.key = "$(Build.BuildNumber)"
        $newContent = ConvertTo-Yaml $versionsYaml
        $newContent | Set-Content -Path "$yamlFilePath"
        
        #checkout new yaml content
        Write-Host "New YAML content:"
        Get-Content -Path "$yamlFilePath"

        git status --porcelain
        git add "$yamlFilePath"
        
        git commit -m "Updated key value pair to $(Build.BuildNumber)"
        
        git push origin HEAD:main --force
    env:
      GitHub_PAT: $(GitHub_Token)
        





